=  Angular Progressive Web App
:toc:

= Introduction


= Assumptions

This guide assumes that you already have installed:

* Node.js
* npm package manager
* Angular CLI

= Sample Application

image::images/angular/angular-pwa/mts-pwa-rec.png["My thai star recommendation", width=800 link="images/angular/angular-pwa/mts-pwa-rec.png"]

To explain how to build progressive web apps (PWA) using angular, a basic application is going to be built. This app will be able to ask for resources and save in the cache in order to work even offline.

== Step 1: Create a new project

This step can be completed with one simple command: `ng new <name>`, where <names> is the name for the app. In this case, the app is going to be named *basic-ng-pwa*.

=== Step 2: Create a service

Web applications usually uses external resources, making necessary the addition of services which can get those resources. This application gets a dish from My Thai Star's back-end and shows it. To do so, a new service is going to be created.

* go to project folder: `cd basic-ng-pwa`
* run `ng generate service data`
* Modify *data.service.ts*, *environment.ts*, *environment.prod.ts*

To retrieve data with this service, you have to import the module HttpClient and add it to the service's contructor. Once added, use it to create a function *getDishes()* that sends http request to My Thai Start's back-end. The URL of the back-end can be stored as an environment variable *MY_THAI_STAR_DISH* 


*data.service.ts* 

  ...
  import { HttpClient } from '@angular/common/http';
  import { MY_THAI_STAR_DISH } from '../environments/environment';

  ...
  export class DataService {
    constructor(private http: HttpClient) {}

    /* Get data from Back-end */
    getDishes() {
      return this.http.get(MY_THAI_STAR_DISH);
    }

    ...
  }

*environments.ts*
  
  ...
  export const MY_THAI_STAR_DISH =
  'http://de-mucdevondepl01:8090/api/services/rest/dishmanagement/v1/dish/1';

  ...

*environments.prod.ts*

  ...
  export const MY_THAI_STAR_DISH =
  'http://de-mucdevondepl01:8090/api/services/rest/dishmanagement/v1/dish/1';

  ...

=== Step 3: Use the service

The component AppComponent implements the interface OnInit and inside its method ngOnInit() the suscription to the services is done. When a dish arrives, it is saved and shown (app.component.html).

  ...
  import { DataService } from './data.service';

  export class AppComponent implements OnInit {
  dish: { name: string; description: string } = { name: '', description: ''};

  ...
  ngOnInit() {
    this.data
      .getDishes()
      .subscribe(
        (dishToday: { dish: { name: string; description: string } }) => {
          this.dish = {
            name: dishToday.dish.name,
            description: dishToday.dish.description,
          };
        },
      );
  }
}

=== Step 4: Structures, styles and updates
This step shows code interesting in the sample app. The complete content can be found in the repository.

*index.html*

To use the Montserrat font add the following link inside the tag header.

  <link href="https://fonts.googleapis.com/css?family=Montserrat" rel="stylesheet">

*styles.css* 

  body {
    ...
    font-family: 'Montserrat', sans-serif;
  }

*app.component.scss*

  .app-main {
    ...

    background-image: url('http://de-mucdevondepl01:8090/background-dish.fe9678cd8802fa639336.png'),
      url('http://de-mucdevondepl01:8090/star.5cbbb1d4fad2e640a5bb.png'),
      url('http://de-mucdevondepl01:8090/Wood2.7b3782e7fd543cc9cdc4.jpg');
    
    ...
  }
  ...

This class applies color to the application and organize its content. Notice that *background-image* uses three images that are not stored inside this project.

*app.component.ts*

This file is also used to reload the app if there are any changes.

* _SwUpdate_: This object comes inside the @angular/pwa package and it is used to detect changes and reload the page if needed.
  
  ...
  import { SwUpdate } from '@angular/service-worker';

  export class AppComponent implements OnInit {
  ...

  constructor(updates: SwUpdate, private data: DataService) {
    updates.available.subscribe((event) => {
      updates.activateUpdate().then(() => document.location.reload());
    });
  }
  ...
}

=== Step 5: Make it Progressive.

Turining an angular app into a PWA is pretty easy, just one module has to be added, to do so, run: `ng add @angular/pwa`. This command also adds two important files, explained below.

* manifest.json

manifest.json is a file that allows to control how the app is displayed in places where native apps are displayed.

*Fields*

_name_: Name of the web application.

_short_name_: Short version of name.

_theme_color_: Default theme color for an application context.

_background_color_: Expected background color of the web application.

_display_: Preferred display mode.

_scope_: Navigation scope of tghis web application's application context.

_start_url_: URL loaded when the user launches the web application.

_icons_: Array of icons that serve as representations of the web app.

* ngsw-config.json

nsgw-config.json specifies which files and data URLs have to be cached and updated by the Angular service worker.

*Fields*

** _index_: File that serves as index page to satisfy navigation requests.
** _assetGroups_: Resources that are part of the app version that update along with the app.
*** _name_: Identifies the group.
*** _installMode_: How the resources are cached (prefetch or lazy).
*** _updateMode_: Caching behaviour when a new version of the app is found (prefetch or lazy).
*** _resources_: Resources to cache. There are three groups.
**** _files_: Lists patterns that match files in the distribution directory.
**** _urls_:  URL patterns matched at runtime.
** _dataGroups_: UsefulIdentifies the group. for API requests.
*** _name_: Identifies the group.
*** _urls_: URL patterns matched at runtime.
*** _version_:  Indicates that the resources being cached have been updated in a backwards-incompatible way.
*** _cacheConfig_: Policy by which matching requests will be cached
**** _maxSize_: The maximum number of entries, or responses, in the cache.
**** _maxAge_: How long responses are allowed to remain in the cache.

***** d: days. (5d = 5 days).
***** h: hours
***** m: minutes
***** s: seconds. (5m20u = 5 minutes and 30 seconds).
***** u: milliseconds

**** _timeout_: How long the Angular service worker will wait for the network to respond before using a cached response. Same dataformat as maxAge.
**** _strategy_: Caching strategies (performance or freshness).
** _navigationUrls_: List of URLs that will be redirected to the index file.

=== Step 6: Configure the app

*manifest.json*

Default configuration

*ngsw-config.json*

At assetGroups -> resources -> urls: In this field the google fonts api is added in order to use Montserrat font even without network.

  "urls": [
          "https://fonts.googleapis.com/**"
        ]

At assetGroups: New asset group to cache pictures used in app.component.scss.

  {
      "name": "pictures",
      "resources": {
        "urls": [
          "http://de-mucdevondepl01:8090/background-dish.fe9678cd8802fa639336.png",
          "http://de-mucdevondepl01:8090/star.5cbbb1d4fad2e640a5bb.png",
          "http://de-mucdevondepl01:8090/Wood2.7b3782e7fd543cc9cdc4.jpg"
        ]
      }
  }

At the root of the json: A data group to cache API calls.

  {
  ...
  "dataGroups": [{
    "name": "mythaistar-dishes",
    "urls": [
      "http://de-mucdevondepl01:8090/api/services/rest/dishmanagement/v1/dish/1"
    ],
    "cacheConfig": {
      "maxSize": 100,
      "maxAge": "1h",
      "timeout": "10s",
      "strategy": "freshness"
    }
  }]
}

=== Step 7: Check that your app is a PWA

To check if an app is a PWA lets compare its normal behaviour against the same app but built for production. Run in the project's root folder the commands below:

`ng build --prod` to build the app using production settings.

`npm install http-server` to install an npm module that can serve your built application. Documentation https://www.npmjs.com/package/http-server[here].

Go to the dist/basic-ng-pwa/ folder running `cd dist/basic-ng-pwa`.

`http-serve -o -c-1` to serve your built app.

image::images/angular/angular-pwa/http-serve.png["My thai star recommendation", width=600 link="images/angular/angular-pwa/http-serve.png"]

In another console instance:

run `ng serve` to open the common app.

image::images/angular/angular-pwa/ng-serve.png["My thai star recommendation", width=600 link="images/angular/angular-pwa/ng-serve.png"]
